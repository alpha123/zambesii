	Device Tree API:
Most integral part of the Floodplainn subsystem is the device tree maintenance
API. It allows for the addition, removal and updating of device tree nodes.
Searching for drivers to instantiate a device, and loading those drivers, etc
are functions which are delegated to other sub-APIs.

Device tree nodes are referred to via their full device ID strings.

	error_t addDevice(utf8Char *parentId, deviceC *device, ubit32 flags);
	error_t addDevice(deviceC *parentDev, deviceC *device, ubit32 flags);
	error_t removeDevice(utf8Char *parentId, ubit32 childId, ubit32 flags);
	error_t removeDevice(deviceC *parentDev, ubit32 childId, ubit32 flags);
	error_t removeDeviceAndChildren(
		utf8Char *parentDev, ubit32 childId, ubit32 flags);
	error_t removeDeviceAndChildren(
		deviceC *parentDev, ubit32 childId, ubit32 flags);

A NULL pointer for "parentId" implicitly refers to the root-device node as the
parent device for the operation.

	Device VFS API:
The Floodplainn VFS is responsible for providing a named hierarchy of
referencable objects that can be used to look-up, manipulate and query devices.
The objects in this namespace are what are used to refer to devices.

Each device has:
	1. An "ID-based" name.
	2. A "class-relative" name.
	3. A "best-guess at a good name" name.

The "ID" forms the basis of device-id strings. Every device has an ID which
identifies it within the scope of all its sibling devices. All of its parent
and child devices also have such a sibling-unique-scope ID in turn, creating a
descending tree of device-IDs with parent-child relationships. Taking all of the
device-IDs from the root-parent node all the way down to the desired child node
will yield a multi-partite ID that uniquely globally identifies that device.
	E.g:	"0/0/1/4/0/2/1" <-- A standard device-ID.

The id-based name of a device forms the basis of its insertion into the kernel's
device-tree. Links to the device are also created within the floodplainn VFS
which are used to establish its class-based and shortname FVFS nodes.

Let us take a disk device, D whose location is as follows: it is attached to
an SCSI HBA, which is attached to PCI-bus 0, which is attached to the sysbus,
and the sysbus is the root node in the system.

Let us furthermore assume that the sysbus has a sibling ID of 0 (it is the root
node, and has no siblings or parents); the PCI-0 bus has a sibling ID of 3
(it has sibling nodes such as the ACPI bus, and the ISA bus, etc); the SCSI
HBA has a sibling ID of 2; and the disk device, D, has a sibling ID of 0. The
full ID of the device, D is then:
	"@f/by-id/0/3/2/0".

Its "shortname"-based VFS name is going to be the compilation of the
sibling-ID + shortname of each of the nodes that lead up to it, followed by its
own concatenation of id + shortname. Let us assume that the shortname of the
sysbus is "pcsysbus". The shortname of the PCI bus is "pci". The shortname of
the SCSI HBA is "scsi-hba" and the shortname of the disk is "scsidisk". The
shortname-name of the device is then:
	"@f/by-shortname/0#pcsysbus/3#pci/2#scsihba/0#scsidisk".

The class-based name of the device, D will be based on the metalanguage APIs
it exposes. In this case, we are dealing with a disk device, so Zambesii will
create a VFS link to the device under the "storage" device class. If the device
had other classes, other links would also have been created.

For example, many sound cards provide both a sound-input and sound-output set of
metalanguage APIs. So for such a device, two links would be created: one within
"sound-input" and one within "sound-output". Note well that the numeric ID of
the same device may be different within two different class-scopes. A device may
have the ID of the "0th" sound-output device, but at the same time, it may also
be the "4th" sound-input device, if for example, 4 other mics are attached to
the system, and the new device was detected after those. The "class-based" name
of the device, D would be:
	"@f/by-class/storage/<N>.

All of these Floodplainn VFS nodes are created, managed and removed implicitly
by the kernel and there is no API available to explicitly manipulate them.
As long as a device has been enumerated by the kernel, it will have a node
within the "by-id" subdirectory of the Floodplainn VFS.

If a device has been enumerated but no driver has been found for it, it will
not have a "by-shortname" or "by-class" name within the FVFS. When a driver is
matched against a device, the "by-shortname" and "by-class" names are generated.

	
