	1. Process creation.
	1.1: Address Space creation.

A process is created first with the call for the spawning of a new address
space by an interested parent process. An address space is spawned with
binding to a NUMA resource-grouping. This binding determines which kernel
clone the process will interact with during syscalls.

	1.2: Process Initialization.

Every process which is in the same execution domain has the same entry point.
Userspace processes have the same entry point whether they are drivers or
applications, and kernel-space processes also have the same entry point whether
they are Distributaries or not.

The kernel provides a syscall, "processTrib_getSelfProcessInfoBlockSize()",
which will return the amount of memory required for a successful call to
"processTrib_getSelfProcessInfoBlock()" and then call that function.

This will provide the common-entry code with information such as the new
process' command line string, environment string, argument string and most
important for this article, the type of process being dealth with, whether it
be a driver, distributary or userspace application.

From there on, the common-entry code will open a file-handle to the process'
command line and load the executable data into its address space. Upon a
successful process loading and initialization, the common-entry code will call
into the kernel telling it that the new process has been initialized, and this
will complete the asynchronous round-trip. If the process failed to load, the
call will simply tell the kernel that the process failed to load, and the
asynchronous round-trip will still be completed, albeit with a response message
that indicates an error.

This approach is excellent because it removes the need to have the kernel load
executables and parse them, and it also means that the kernel never has to
actually open file handles -- all of this is done by the common-entry code. It
also makes creating new processes asynchronous, which is a definite good thing.

	1.2: Static Blocks.

The common-entry searches new process' executables for a section by the name of
".__kzambesii" in which it expects to find certain data structures. These are
yet-undefined.

	2. Thread Creation.

A thread may be created in any address space. Thread affinity may be set on
a call to processStream::spawnThread(). It takes the entry point,
scheduling priority, scheduling policy, CPU and memory NUMA binding, and
a set of flags. The entry point for a thread may be the executable's entry
point. This is specified by setting the flag SPAWNTHREAD_FLAGS_ENTRY_MAIN.

A thread is scheduled to begin executing as soon as it is created.

	3. API.

	3.1. Process spawning.

processTribC::spawnProcess() / processStreamC::pullEvent().

Process spawning is asynchronous. The kernel allocates a process control block
(processStreamC), an all that comes with it (address space, etc) then spawns the
new process' first thread at a fixed entry point address, which is the
common-entry for all processes of its type. This common-entry code proceeds to
open file descriptors for the process as needed parse its executable image,
expanding it into the new process' address space.

Upon either successful or unsuccessful completion of the executable loading
sequence, the common-entry code will syscall back into the kernel, effectively
completing the asynchronous round-trip and notifying the kernel of whether or
not the process was spawned successfully. The kernel will queue a message to
that effect on the parent process' event queue, and that is the end of the
spawnProcess()/pullEvent() asynchronous pair. The parent process can then
call pullEvent() to determine whether or not its call to createProcess() was
successful.

	3.2. Thread spawning.

Thread spawning is synchronous since it is impossible for it to block in any
way.

processStreamC::spawnThread(
	void *entryPoint,
	void *argument,
	bitmapC *cpuAffinity,
	schedPolicyE schedPolicy, prio_t prio, uarch_t flags,
	processId_t *ret):

	SchedPolicy should be inherited from the spawning thread, because
	a process can have multiple threads, each needing different scheduling
	queue policies.
	Overrides:
		SET.

	Priority should be set to PRIOCLASS_DEFAULT by default, to prevent
	priority based DoS, and discourage users from creating high priority
	threads en mass by mistake.
	Overrides:
		STIHERIT, SET_CLASS, SET.

	Affinity should be inherited from the spawning thread by default. This
	is because a process may have multple threads, say, one for each device
	it uses, and it may bind each thread to the NUMA domain for its device,
	to service requests to that device for it, and gain maximum NUMA
	optimization. If one of the threads spawns a child, the child should
	also be bound to the domain of its parent thread.
	Overrides:
		PINHERIT, SET.

