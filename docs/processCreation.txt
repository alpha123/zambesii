	1. Process creation.
	1.1: Address Space creation.

A process is created first with the call for the spawning of a new address
space by an interested parent process. An address space is spawned with
binding to a NUMA resource-grouping. This binding determines which kernel
clone the process will interact with during syscalls.

	1.2: Executable code loading.

An address space may be edited with kernel aid to write code and data into
it. The process trbutary has the executable parser subsystem built into it,
which parses executable formats for the kernel. The parser sub-API allows
for the loading of executable parsers as well.

The kernel searches for a section by the name of "zambezii" in which it
expects to find certain data structures. Among them is the zambezii static
block descriptor structure, which describes all of the executable's static
data blocks and tells the kernel where to load them in vmem, and what offset
to begin copying from.

An executable's main static blocks are copied into the process's bound node.
Subsequent static data blocks can be loaded by using
processStream::defineStaticData(), etc. These will be allocated using the memory
affinity scheme of the calling thread, so a thread should be sure to change its
affinity before calling this function, or otherwise have an appropriate thread
call it.

	1.3 Thread Creation.

A thread may be created in any address space. Thread affinity may be set on
a call to processStream::spawnThread(). It takes the entry point,
scheduling priority, scheduling policy, CPU and memory NUMA binding, and
a set of flags. The entry point for a thread may be the executable's entry
point. This is specified by setting the flag SPAWNTHREAD_FLAGS_ENTRY_MAIN.

A thread is scheduled to begin executing as soon as it is created.
