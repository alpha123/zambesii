#ifndef ___K_CXX_LIB_POINTER_H
	#define ___K_CXX_LIB_POINTER_H

	#include <__kstdlib/__ktypes.h>
	#include <__kstdlib/__kcxxlib/new>

class MemoryStream;
class VaddrSpaceStream;

namespace pointer
{
	void vmemUnmapAndFree(
		void *vaddr, uarch_t nPages, status_t nMapped,
		VaddrSpaceStream *vasStream);

	void streamFree(void *vaddr, MemoryStream *memStream);
}

template <class type>
class Pointer
{
protected:
	explicit Pointer(type *_p=NULL) : p(_p) {}
	~Pointer(void) { reset(); }

public:	Pointer &operator =(Pointer &_p) { reset(_p.release()); };

public:
	// Equivalent to std::unique_ptr<>::get().
	type *get(void) { return p; }
	type **addressOf(void) { return &p; }
	// Equivalent to std::unique_ptr<>::reset(void *=NULL).
	void reset(type *_p=NULL) { p = _p; }
	// Equivalent to std::unique_ptr<>::release().
	type *release(void)
	{
		type	*tmp=p;
		p = NULL;
		return tmp;
	}

	type *operator ->() { return p; }
	type &operator *() { return *p; }
	type &operator [](int i) { return p[i]; }
	Pointer &operator =(type *_p) { p = _p; return *this; }
	int operator ==(type *_p) { return p == _p; }
	int operator >(type *_p) { return p > _p; }
	int operator <(type *_p) { return p < _p; }
	Pointer &operator++(void) { ++p; return *this; }
	Pointer &operator--(void) { --p; return *this; }

	// We refuse to provide operators + and -. Use array indexing instead.
private:
	virtual void _(void) = 0;

protected:
	type	*p;
};

class DefaultDeleter {};
class ArrayDeleter {};

template <class type, class deleter>
class HeapPtr
:
public Pointer<type>
{
public:
	explicit HeapPtr(type *_p=NULL)
	:
	Pointer<type>(_p)
	{}

	~HeapPtr(void) { reset(); }

	HeapPtr &operator =(HeapPtr &_p)
		{ reset(_p.release()); return *this; }

public:
	HeapPtr &operator =(type *_p)
		{ Pointer<type>::operator =(_p); return *this; }

	void reset(type *_p=NULL) { Pointer<type>::reset(_p); }

private:
	virtual void _(void) = 0;
};

template <class type>
class HeapObject
:
public HeapPtr<type, DefaultDeleter>
{
public:
	explicit HeapObject(type *_p=NULL)
	:
	HeapPtr<type, DefaultDeleter>(_p)
	{}

	~HeapObject(void) { reset(); }

	HeapObject &operator =(HeapObject &_p)
		{ reset(_p.release()); return *this; };

public:
	HeapObject &operator =(type *_p) {
		HeapPtr<type, DefaultDeleter>::operator =(_p); return *this;
	}

	void reset(type *_p=NULL)
	{
		if (this->get() != NULL) { delete this->get(); };
		HeapPtr<type, DefaultDeleter>::reset(_p);
	};

private:
	virtual void _(void) {}
};

template <class type>
class HeapArray
:
public HeapPtr<type, ArrayDeleter>
{
public:
	explicit HeapArray(type *_p=NULL)
	:
	HeapPtr<type, ArrayDeleter>(_p)
	{}

	~HeapArray(void) { reset(); }

	HeapArray &operator =(HeapArray &_p)
		{ reset(_p.release()); return *this; };

public:
	HeapArray &operator =(type *_p) {
		HeapPtr<type, ArrayDeleter>::operator =(_p); return *this;
	}

	void reset(type *_p=NULL)
	{
		if (this->get() != NULL) { delete[] this->get(); };
		HeapPtr<type, ArrayDeleter>::reset(_p);
	};

private:
	virtual void _(void) {}
};

template <class type>
class LoosePage
:
public Pointer<type>
{
public:
	explicit LoosePage(type *_p=NULL)
	:
	Pointer<type>(_p), nPages(0), nMapped(0),  vasStream(NULL)
	{}

	~LoosePage(void) { reset(); }

	LoosePage &operator =(LoosePage &_p)
	{
		reset(_p.release(), _p.nPages, _p.nMapped, _p.vasStream);
		return *this;
	}

public:
	LoosePage &operator =(type *_p)
		{ Pointer<type>::operator =(_p); return *this; }

	void reset(
		type *_p=NULL, uarch_t _nPages=0, status_t _nMapped=0,
		VaddrSpaceStream *_vasStream=NULL)
	{
		if (this->get() != NULL && nPages > 0)
		{
			pointer::vmemUnmapAndFree(
				this->get(), nPages, nMapped, vasStream);
		};

		nPages = _nPages;
		nMapped = _nMapped;
		vasStream = _vasStream;
		Pointer<type>::reset(_p);
	};

private:
	virtual void _(void) {}

public:
	uarch_t			nPages;
	status_t		nMapped;
	VaddrSpaceStream	*vasStream;
};

template <class type>
class StreamMem
:
public Pointer<type>
{
public:
	explicit StreamMem(type *_p=NULL) : Pointer<type>(_p), memStream(NULL) {}
	~StreamMem(void) { reset(); }

	StreamMem &operator =(StreamMem &_p)
		{ reset(_p.release(), _p.memStream); return *this; }

public:
	StreamMem &operator =(type *_p)
		{ Pointer<type>::operator =(_p); return *this; }

	void reset(type *_p=NULL, MemoryStream *_memStream=NULL)
	{
		if (this->get() != NULL) {
			pointer::streamFree(this->get(), memStream);
		};

		memStream = _memStream;
		Pointer<type>::reset(_p);
	}

private:
	virtual void _(void) {}

public:
	MemoryStream		*memStream;
};

#endif

